CREATE TABLE USER_NO_CONSTRAINT (
    USER_NO NUMBER,
    USER_ID VARCHAR2(20),
    USER_PWD VARCHAR2(30),
    USER_NAME VARCHAR2(30),
    USER_GENDER VARCHAR2(10),
    USER_PHONE VARCHAR2(30),
    USER_EMAIL VARCHAR2(50)
);
DROP TABLE USER_NO_CONSTRAINT;
SELECT * FROM USER_NO_CONSTRAINT;
-- 1, khuser01, pass01, 일용자, 남, 01028227373, khuser01@gmail.com
INSERT INTO USER_NO_CONSTRAINT
VALUES(1, 'khuser01', 'pass01', '일용자', '남', '01028227373', 'khuser01@gmail.com');
ROLLBACK;
COMMIT;
-- 제약조건
INSERT INTO USER_NO_CONSTRAINT
VALUES(2, 'khuser02', null, null, null, null, null);

CREATE TABLE USER_NOTNULL (
    USER_NO NUMBER,
    USER_ID VARCHAR2(20) NOT NULL,
    USER_PWD VARCHAR2(30) NOT NULL,
    USER_NAME VARCHAR2(30) NOT NULL,
    USER_GENDER VARCHAR2(10),
    USER_PHONE VARCHAR2(30),
    USER_EMAIL VARCHAR2(50)
);
INSERT INTO USER_NOTNULL
VALUES(1, null, 'pass01', '일용자', null, null, null);
SELECT * FROM USER_NOTNULL;

CREATE TABLE USER_UNIQUE (
    USER_NO NUMBER,
    USER_ID VARCHAR2(20) UNIQUE,
    USER_PWD VARCHAR2(30) NOT NULL,
    USER_NAME VARCHAR2(30) NOT NULL,
    USER_GENDER VARCHAR2(10),
    USER_PHONE VARCHAR2(30),
    USER_EMAIL VARCHAR2(50)
);
INSERT INTO USER_UNIQUE
VALUES(1, 'khuser01', 'pass01', '일용자', null, null, null);
INSERT INTO USER_UNIQUE
VALUES(1, null, 'pass01', '일용자', null, null, null);
-- UNIQUE 제약 조건으로 중복은 막았으나 NULL은 막지 못함..
SELECT * FROM USER_UNIQUE;

CREATE TABLE USER_PRIMARY_KEY (
    USER_NO NUMBER,
    USER_ID VARCHAR2(20) PRIMARY KEY,   -- UNIQUE, NOT NULL
    USER_PWD VARCHAR2(30) NOT NULL,
    USER_NAME VARCHAR2(30) NOT NULL,
    USER_GENDER VARCHAR2(10),
    USER_PHONE VARCHAR2(30),
    USER_EMAIL VARCHAR2(50)
);
DROP TABLE USER_PRIMARY_KEY;
INSERT INTO USER_PRIMARY_KEY
VALUES(1, 'khuser01', 'pass01', '일용자', null, null, null);
INSERT INTO USER_PRIMARY_KEY
VALUES(2, 'khuser02', 'pass02', '이용자', null, null, null);
SELECT * FROM USER_PRIMARY_KEY;
COMMIT;

CREATE TABLE USER_CHECK (
    USER_NO NUMBER UNIQUE,
    USER_ID VARCHAR2(20) PRIMARY KEY,   -- UNIQUE, NOT NULL
    USER_PWD VARCHAR2(30) NOT NULL,
    USER_NAME VARCHAR2(30) NOT NULL,
    USER_GENDER VARCHAR2(10) CHECK(USER_GENDER IN('M', 'F')),
    USER_PHONE VARCHAR2(30),
    USER_EMAIL VARCHAR2(50)
);
DROP TABLE USER_CHECK;
INSERT INTO USER_CHECK
VALUES(1, 'khuser01', 'pass01', '일용자', 'M', null, null);
INSERT INTO USER_CHECK
VALUES(2, 'khuser02', 'pass02', '이용자', '남자', null, null);
INSERT INTO USER_CHECK
VALUES(3, 'khuser03', 'pass03', '삼용자', 'Male', null, null);
SELECT * FROM USER_CHECK;
COMMIT;
-- 지금까지 배운 제약조건
-- NOT NULL : NULL이 못들어가게함.
-- UNIQUE : 중복이 안되게 함, NULL은 가능
-- PRIMARY KEY : 중복이 안되고 NULL도 안됨, 유일한 값
-- CHECK, CHECK( 컬럼명 IN ( 값1, 값2 ) ) : 지정한 값만 들어가게 함.

CREATE TABLE USER_DEFAULT (
    USER_NO NUMBER UNIQUE,
    USER_ID VARCHAR2(20) PRIMARY KEY,   -- UNIQUE, NOT NULL
    USER_PWD VARCHAR2(30) NOT NULL,
    USER_NAME VARCHAR2(30) NOT NULL,
    USER_GENDER VARCHAR2(10) CHECK(USER_GENDER IN('M', 'F')),
    USER_PHONE VARCHAR2(30),
    USER_EMAIL VARCHAR2(50),
    USER_DATE DATE DEFAULT SYSDATE+7
);
DROP TABLE USER_DEFAULT;
INSERT INTO USER_DEFAULT
VALUES(1, 'khuser01', 'pass01', '일용자', 'M', '01082829292', 'khuser01@naver.com', '24/06/14');
INSERT INTO USER_DEFAULT
VALUES(1, 'khuser01', 'pass01', '일용자', 'M', '01082829292', 'khuser01@naver.com', DEFAULT);
INSERT INTO USER_DEFAULT
VALUES(2, 'khuser02', 'pass02', '이용자', 'M', '01082829292', 'khuser02@naver.com', DEFAULT);
INSERT INTO USER_DEFAULT
VALUES(2, 'khuser02', 'pass02', '이용자', 'M', '01082829292', 'khuser02@naver.com', SYSDATE+7);
SELECT * FROM USER_DEFAULT;
-- 제약조건
-- 1. NOT NULL : NULL이 들어가지 않게함.
-- 2. UNIQUE : 중복이 되지 않게함.
-- 3. PRIMARY KEY : 중복이 안되고 NULL이 되지 않도록 함.
-- 4. CHECK : 지정된 값만 저장되도록 함.
-- 5. DEFAULT : 지정된 함수나 표현식으로 실행되도록 함.
-- 6. FOREIGN KEY(외래키)

CREATE TABLE USER_GRADE(
    GRADE_CODE NUMBER PRIMARY KEY,
    GRADE_NAME VARCHAR2(30) NOT NULL
);
SELECT * FROM USER_GRADE;
--DELETE FROM USER_GRADE;
INSERT INTO USER_GRADE VALUES(10, '일반회원');
INSERT INTO USER_GRADE VALUES(20, '우수회원');
INSERT INTO USER_GRADE VALUES(30, '특별회원');
INSERT INTO USER_GRADE VALUES(40, 'VIP회원');
DELETE FROM USER_GRADE WHERE GRADE_CODE = 40;

CREATE TABLE USER_FOREIGN_KEY(
    USER_NO NUMBER PRIMARY KEY,
    USER_ID VARCHAR2(20) UNIQUE NOT NULL,
    USER_PWD VARCHAR2(30) NOT NULL,
    USER_NAME VARCHAR2(30) NOT NULL,
    USER_GENDER VARCHAR2(10) CHECK(USER_GENDER IN('M', 'F')),
    USER_PHONE VARCHAR2(30),
    USER_EMAIL VARCHAR2(50),
    USER_DATE DATE DEFAULT SYSDATE,
    GRADE_CODE NUMBER REFERENCES USER_GRADE(GRADE_CODE) ON DELETE CASCADE
);
DROP TABLE USER_FOREIGN_KEY;
-- USER_FOREIGN_KEY에 있는 GRADE_CODE는 USER_GRADE의 GRADE_CODE가 가지고 있는 10, 20, 30만 넣을 수 있어요
-- 10, 20, 30외에 40은 안돼요 50도 안돼요
SELECT * FROM USER_FOREIGN_KEY;
INSERT INTO USER_FOREIGN_KEY
VALUES(1, 'khuser01', 'pass01', '일용자', 'M', null, null, DEFAULT, 10);
INSERT INTO USER_FOREIGN_KEY
VALUES(2, 'khuser02', 'pass02', '이용자', 'M', null, null, DEFAULT, 20);
INSERT INTO USER_FOREIGN_KEY
VALUES(3, 'khuser03', 'pass03', '삼용자', 'M', null, null, DEFAULT, 30);
INSERT INTO USER_FOREIGN_KEY
VALUES(4, 'khuser04', 'pass04', '사용자', 'M', null, null, DEFAULT, 40);
UPDATE USER_FOREIGN_KEY
SET GRADE_CODE = 40 WHERE USER_ID = 'khuser04';
--DELETE FROM USER_FOREIGN_KEY WHERE GRADE_CODE = 40;
DELETE FROM USER_GRADE WHERE GRADE_CODE = 40;

-- 테이블명 : SHOP_MEMBER
-- 저장해야할 데이터 : 1, khuser01, pass01, 일용자, M, 01082829292, khuser01@gmail.com
CREATE TABLE SHOP_MEMBER(
    USER_NO NUMBER PRIMARY KEY,
    USER_ID VARCHAR2(20) UNIQUE NOT NULL,
    USER_PWD VARCHAR2(30) NOT NULL,
    USER_NAME VARCHAR2(30) NOT NULL,
    USER_GENDER VARCHAR2(10) CHECK(USER_GENDER IN ('M', 'F')),
    USER_PHONE VARCHAR2(30),
    USER_EMAIL VARCHAR2(50)
);
INSERT INTO SHOP_MEMBER
VALUES(1, 'khuser01', 'pass01', '일용자', 'M', '01082829292', 'khuser01@gmail.com');
INSERT INTO SHOP_MEMBER
VALUES(2, 'khuser02', 'pass02', '이용자', 'M', '01082829292', 'khuser02@gmail.com');
SELECT * FROM SHOP_MEMBER;
DELETE FROM SHOP_MEMBER WHERE USER_ID = 'khuser01';
COMMIT;
-- 테이블명 : SHOP_BUY
-- 저장해야할 데이터 : 1, khuser01, 농구화, 24/06/14 
SELECT * FROM SHOP_BUY;
CREATE TABLE SHOP_BUY(
    BUY_NO NUMBER PRIMARY KEY,
    USER_ID VARCHAR2(30) REFERENCES SHOP_MEMBER(USER_ID) ON DELETE SET NULL,
    PRODUCT_NAME VARCHAR2(20),
    REG_DATE DATE DEFAULT SYSDATE
);

DROP TABLE SHOP_BUY;
-- SHOP_BUY의 USER_ID는 SHOP_MEMBER의 USER_ID가 가지고 있는 
-- khuser01, khuser02 등..만 넣을 수 있어요
SELECT * FROM SHOP_BUY;
INSERT INTO SHOP_BUY
VALUES(1, 'khuser01', '농구화', DEFAULT);
INSERT INTO SHOP_BUY
VALUES(2, 'khuser02', '축구화', DEFAULT); -- parent key not found

-- 외래키 FOREIGN KEY
-- 자식테이블에서 부모 테이블이 가지고 있는 컬럼의 필드값으로만 INSERT하도록 하는 것
-- 참조 무결성을 보장하는 제약조건임.
-- 외래키 설정방법
-- 컬럼레벨 : REFERENCES 부모테이블(컬럼명) 삭제 옵션(ON DELETE SET NULL, ON DELETE CASCADE)
-- 외래키 삭제옵션
-- 1. 기본 옵션 ON DELETE RESTRICTED
-- 2. 연관된 모든 것 삭제 옵션 : ON DELETE CASCADE
-- 3. NULL로 만드는 삭제 옵션 : ON DELETE SET NULL
-- 부모테이블의 데이터 삭제 시도시 자식 테이블의 데이터를 처리하는 방법







